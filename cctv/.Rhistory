lnd_map <-
get_map(getbb("Islington Greater London"), maptype = "toner-background")
# Download Open Street Map data
osm <- opq(bbox = "islington greater london uk") %>%
add_osm_feature(
key = "man_made",
value = "surveillance",
value_exact = FALSE,
match_case = FALSE
) %>%
osmdata_sf()
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
)
# Generate static plots
lnd_map <-
get_map(getbb("Islington Greater London"), maptype = "toner-lite")
# Generate static plots
lnd_map <-
get_map(getbb("Islington Greater London"), maptype = "toner-lite")
# Download Open Street Map data
osm <- opq(bbox = "islington greater london uk") %>%
add_osm_feature(
key = "man_made",
value = "surveillance",
value_exact = FALSE,
match_case = FALSE
) %>%
osmdata_sf()
# Map gov data
ggmap(lnd_map) +
geom_point(
data = gov,
aes(x = Long, y = Lat),
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21
) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
)
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
osm <- opq(bbox = "greater london uk") %>%
add_osm_feature(
key = "man_made",
value = "surveillance",
value_exact = FALSE,
match_case = FALSE
) %>%
osmdata_sf()
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner-background")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Download Open Street Map data
osm <- opq(bbox = "islington greater london uk") %>%
add_osm_feature(
key = "man_made",
value = "surveillance",
value_exact = FALSE,
match_case = FALSE
) %>%
osmdata_sf()
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner-lines")
# Map TfL data
ggmap(lnd_map) +
geom_point(
data = jam,
aes(x = Longitude, y = Latitude),
colour = "#238443",
fill = "#113b92",
alpha = .5,
size = 4,
shape = 21
)
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "terrain-lines")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "terrain-lines")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "watercolor")
get_map(getbb(" Greater London"), maptype = "toner-background")
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner-background", source = "stamen")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "satellite")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "satellite")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "satellite")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
lnd_map <-
get_map(getbb(" Greater London"), maptype = "terrain")
lnd_map <-
get_map(getbb(" Greater London"), maptype = "terrain")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), maptype = "toner-lite")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), source = "google", maptype = "terrain")
# Generate static plots
lnd_map <-
get_map(getbb(" Greater London"), source = "google", maptype = "terrain")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
lnd_map <-
get_map(getbb("Islington Borough Greater London UK"), source = "google", maptype = "terrain")
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#41dc5d",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Map OSM data
ggmap(lnd_map) +
geom_sf(
data = osm$osm_points,
inherit.aes = FALSE,
colour = "#238443",
fill = "#D53635",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Import council json
gov_raw <- jsonlite::fromJSON("islington-cctv.json", flatten = TRUE)
gov <- gov_raw$d[[2]]
# Clean council data
gov_split <-
setNames(data.frame(do.call("rbind", strsplit(
gsub("\\(|\\)|,", "", gov$GeometryLL), split = " "
))), c("Long", "Lat"))
gov <- data.frame(cbind(gov[, 1:(length(gov) - 1)], gov_split))
gov$Long = as.numeric(as.character(gov$Long))
gov$Lat = as.numeric(as.character(gov$Lat))
# Import and prepare TfL data
jam <- read_csv("jamcam.csv")
# Map gov data
ggmap(lnd_map) +
geom_point(
data = gov,
aes(x = Long, y = Lat),
colour = "#238443",
fill = "#004529",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Map TfL data
ggmap(lnd_map) +
geom_point(
data = jam,
aes(x = Longitude, y = Latitude),
colour = "#238443",
fill = "#F4692F",
alpha = .5,
size = 4,
shape = 21
) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
fr <- read_csv("facial-recognition.csv")
View(fr)
fr %>%
filter(fr$`True-positives` = "Awaiting information")
fr %>%
filter(fr$`True-positives` == "Awaiting information")
View(fr)
fr %>%
filter(!fr$`True-positives` == "Awaiting information")
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar(aes(y = True-positives, x = False-positives), data = charts.data,
stat="identity")
View(fr)
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar(aes(y = True-positives, x = False-positives), stat="identity")
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar(aes(y = "True-positives", x = "False-positives"), stat="identity")
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar(aes(y = "True-positives", x = "Event"), stat="identity")
fr %>%
filter(!fr$`True-positives` == "Awaiting information") %>%
ggplot() +
geom_bar(aes(y = "False-positives", x = "Event"), stat="identity")
fr <- filter(!fr$`True-positives` == "Awaiting information")
fr <- fr %>%
filter(!fr$`True-positives` == "Awaiting information")
View(fr)
View(fr)
library(reshape2)
fr <- melt(DF, id.var="Event")
library(reshape2)
fr <- melt(fr, id.var="Event")
View(fr)
fr <- read_csv("facial-recognition.csv")
fr <- fr %>%
filter(!fr$`True-positives` == "Awaiting information")
View(fr)
fr <- melt(fr)
View(fr)
ggplot() +
geom_bar(aes(y = "False-positives", x = "Event"), stat="identity")
ggplot(fr, aes(x = Event, y = value, fill = variable)) +
geom_bar(stat = "identity")
ggplot(fr, aes(x = Event)) +
geom_bar(stat = "identity")
ggplot(fr, aes(x = Event, y = True-positives, fill = False-positives)) +
geom_bar(stat = "identity")
ggplot(fr, aes(x = Event, y = "True-positives", fill = "False-positives")) +
geom_bar(stat = "identity")
ggplot(fr, aes(x = Event, y = "True-positives")) +
geom_bar(stat = "identity")
fr <- read_csv("facial-recognition.csv")
fr <- fr %>%
filter(!fr$`True-positives` == "Awaiting information")
ggplot(data = fr, aes(x = "Event", y = "True-positives")) +
geom_col(aes(fill = "False-positives"), width = 0.7)+
)
ggplot(data = fr, aes(x = "Event", y = "True-positives")) +
geom_col(aes(fill = "False-positives"), width = 0.7)
ggplot(data = fr, aes(x=Event) ) + geom_bar()
ggplot(data = fr, aes(x=Event, fill="True-positives") ) + geom_bar()
ggplot(data = fr, aes(x=Event, y = "False-positives", fill="True-positives"))+ geom_bar()
ggplot(data = fr,
aes(x=Event, y = "False-positives", fill="True-positives")) +
geom_bar()
ggplot(data = fr,
aes(x=Event, y = "False-positives")) +
geom_bar()
d2 <- fr %>%
group_by("True-positives","False-positives") %>%
summarise(count=n()) %>%
mutate(perc=count/sum(count))
View(d2)
fr <- melt(fr)
View(fr)
fr <- melt(fr)
fr <- t(fr)
View(fr)
d2 <- fr %>%
group_by("True-positives","False-positives") %>%
summarise(count=n()) %>%
mutate(perc=count/sum(count))
